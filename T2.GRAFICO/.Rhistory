install.packages('tidytext')
install.packages('dplyar')
install.packages('dplyr')
install.packages("tidyr")
install.packages("stringr")
install.packages("e1071")
installed.packages('keras')
install.packages("keras")
library(keras)
install_keras()
file.name <- "https://inf.ufes.br/~elias/dataSets/basic-datasets.tar.gz"
file.name2 <- "dataset.tar.gz"
download.file(file.name, destfile =  file.name2)
untar(file.name2, list=TRUE)
untar(file.name2)
file.name2 <- "dataset.tar.gz"
download.file(file.name, destfile =  file.name2)
file.list <- untar(file.name2)
file.list <- untar(file.name2)
file.name <- "https://inf.ufes.br/~elias/dataSets/basic-datasets.tar.gz"
file.name2 <- "dataset.tar.gz"
mainDir = getwd()
subDir <- "output"
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
setwd(file.path(mainDir, subDir))
download.file(file.name, destfile =  file.name2)
file.list <- untar(file.name2)
untar(file.name2)
untar(file.name2)
file.list <- untar(file.name2, list = TRUE)
setwd(file.path(mainDir))
unlink(subDir, recursive = TRUE)
script.dir <- dirname(sys.frame(1)$ofile)
script.dir <- dirname(Sys.getenv())
file.folder.output2 <- "resultado"
dados.feature <- read.csv("resultado/features.mtx", sep = " ", header = FALSE)
dados.dim <- dados.feature[2,] #obtem as dimentï¿½ï¿½es da tabela
dados.feature <- dados.feature[3:nrow(dados.feature),] # remove dados espurios
colnames(dados.feature) <- c("documento","feature","qtd") # renomeia campos da tabela
setwd("C:/Users/james/PROJETOS/RII/T2.GRAFICO")
dados.feature <- read.csv("resultado/features.mtx", sep = " ", header = FALSE)
dados.dim <- dados.feature[2,] #obtem as dimentï¿½ï¿½es da tabela
dados.feature <- dados.feature[3:nrow(dados.feature),] # remove dados espurios
colnames(dados.feature) <- c("documento","feature","qtd") # renomeia campos da tabela
View(dados.feature)
dados.medias$media <- rowMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
dados.feature.matrix <- spread(dados.feature, feature, qtd) # realiza tranformacao dos dados
dados.feature.matrix[is.na(dados.feature.matrix)] <- 0 # substitui vazios por 0
dados.medias$media <- rowMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
library(tidyr)
library(scatterplot3d)
dados.feature.matrix <- spread(dados.feature, feature, qtd) # realiza tranformacao dos dados
dados.feature.matrix[is.na(dados.feature.matrix)] <- 0 # substitui vazios por 0
dados.medias$media <- rowMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
dados.medias <- rowMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
dados.medias
dados.medias <- colMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
dados.medias
View(dados.feature)
View(dados.feature.matrix)
dados.medias.lin <- rowMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
dados.medias.col <- colMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
dados.feature.matrix <- rbind(dados.feature.matrix, dados.medias.row )
dados.feature.matrix <- cbind(dados.feature.matrix, dados.medias.row )
dados.feature.matrix <- cbind(dados.feature.matrix, dados.medias.col )
dados.medias.row
dados.medias.col
dados.medias.row <- rowMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
write.table(dados.medias.row, "row-mean.dat", quote = FALSE, row.names = FALSE, col.names = FALSE)
dados.medias.col <- colMeans(dados.feature.matrix[2:ncol(dados.feature.matrix)])
write.table(dados.medias.col, "column-mean.dat", quote = FALSE, row.names = FALSE, col.names = FALSE)
dados.feature.matrix[2:ncol(dados.feature.matrix)]
