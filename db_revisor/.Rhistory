install.packages("dplyr")
install.packages("tidytext")
install.packages("tidyr")
install.packages("stringr")
install.packages("e1071")
setwd("/home/james/Documents/RII/db_revisor")
library(dplyr)
library(tidytext)
library(tidyr)
library(stringr)
library(e1071)
setwd("/home/james/Documents/RII/db_revisor")
texto <- scan("texto1.txt", what="char", sep="\n", encoding = "UTF-8")
dados.full <- data_frame(text = texto)
dados.bigram <- dados.full %>% unnest_tokens(tregram, text, token = "ngrams", n = 3)
dados.bigram.summ <- dados.bigram %>% separate(tregram, c("word1","word2","word3"), sep = " ")
dados.bigram.summ$n <- NULL
modelo <- naiveBayes(word3 ~ ., data = dados.bigram.summ)
infe <- data.frame(word1 = "Peito", word2 = "a")
res <- predict(modelo, infe)
predi <- predict(modelo, infe, type = "raw")
View(predi)
res <- predict(modelo, infe, type = "class")
View(res)
print(res)
infe <- data.frame(word1 = "Peito", word2 = "a")
infe$word1 <- as.character(infe$word1)
infe$word2 <- as.character(infe$word2)
res <- predict(modelo, infe, type = "class")
predi <- predict(modelo, infe, type = "raw")
table(res, dados.bigram.summ$word3)
print(res)
texto <- scan("texto1.txt", what="char", sep="\n", encoding = "UTF-8")
dados.full <- data_frame(text = texto)
dados.bigram <- dados.full %>% unnest_tokens(tregram, text, token = "ngrams", n = 3)
dados.bigram.summ <- dados.bigram %>% separate(tregram, c("word1","word2","word3"), sep = " ")
dados.bigram.summ$n <- NULL
modelo <- naiveBayes(as.factor(word3) ~ ., data = dados.bigram.summ)
infe <- data.frame(word1 = "Peito", word2 = "a")
infe$word1 <- as.character(infe$word1)
infe$word2 <- as.character(infe$word2)
res <- predict(modelo, infe, type = "class")
predi <- predict(modelo, infe, type = "raw")
print(res)
texto <- scan("texto1.txt", what="char", sep="\n", encoding = "UTF-8")
dados.full <- data_frame(text = texto)
dados.bigram <- dados.full %>% unnest_tokens(tregram, text, token = "ngrams", n = 3)
dados.bigram.summ <- dados.bigram %>% separate(tregram, c("word1","word2","word3"), sep = " ")
View(dados.bigram.summ)
setwd("/home/james/Documents/RII/db_revisor")
library(dplyr)
library(tidytext)
library(tidyr)
library(stringr)
library(e1071)
texto <- scan("texto1.txt", what="char", sep="\n", encoding = "UTF-8")
dados.full <- data_frame(text = texto)
dados.bigram <- dados.full %>% unnest_tokens(tregram, text, token = "ngrams", n = 3)
dados.bigram.summ <- dados.bigram %>% separate(tregram, c("word1","word2","word3"), sep = " ")
modelo <- naiveBayes(as.factor(word3) ~ ., data = dados.bigram.summ)
infe <- data.frame(word1 = "Peito", word2 = "a")
infe$word1 <- as.character(infe$word1)
infe$word2 <- as.character(infe$word2)
res <- predict(modelo, infe, type = "class")
predi <- predict(modelo, infe, type = "raw")
print(res)
res
print(res[1])
View(res)
print(res[1,])
print(res[,1])
print(res[1])
print(res[1,1])
print(as.character(res))
View(predi)
texto <- scan("texto1.txt", what="char", sep="\n", encoding = "UTF-8")
dados.full <- data_frame(text = texto)
dados.bigram <- dados.full %>% unnest_tokens(tregram, text, token = "ngrams", n = 3)
dados.bigram.summ <- dados.bigram %>% separate(tregram, c("word1","word2","word3"), sep = " ")
modelo <- naiveBayes(as.factor(word3) ~ ., data = dados.bigram.summ)
infe <- data.frame(word1 = "Peito", word2 = "a")
#infe$word1 <- as.character(infe$word1)
#infe$word2 <- as.character(infe$word2)
res <- predict(modelo, infe, type = "class")
#predi <- predict(modelo, infe, type = "raw")
print(as.character(res))
setwd("/home/james/Documents/RII/db_revisor")
library(dplyr)
library(tidytext)
library(tidyr)
library(stringr)
library(e1071)
texto <- scan("texto1.txt", what="char", sep="\n", encoding = "UTF-8")
dados.full <- data_frame(text = texto)
dados.bigram <- dados.full %>% unnest_tokens(tregram, text, token = "ngrams", n = 3)
dados.bigram.summ <- dados.bigram %>% separate(tregram, c("word1","word2","word3"), sep = " ")
modelo <- naiveBayes(as.factor(word3) ~ ., data = dados.bigram.summ)
infe <- data.frame(word1 = "Peito", word2 = "a")
#infe$word1 <- as.character(infe$word1)
#infe$word2 <- as.character(infe$word2)
res <- predict(modelo, infe, type = "class")
#predi <- predict(modelo, infe, type = "raw")
print(as.character(res))
